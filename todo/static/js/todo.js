// Generated by CoffeeScript 1.4.0
(function() {
  var account_callback, add_cell, additem, ajax_logout, csrftoken, default_priority, del_item, display_messages, edit_cell, get_delbtn, get_header_row, get_login_info, get_priority_widget, logged_in, priorities, set_login_info, setlist;

  logged_in = false;

  csrftoken = null;

  default_priority = 'medium';

  priorities = ["low", "medium", "high"];

  $(document).ajaxSend(function(event, jqxhr, settings) {
    if (settings.url.slice(0, 1) === "/" && settings.type === 'POST') {
      return jqxhr.setRequestHeader('X-CSRFToken', csrftoken);
    }
  });

  $(document).ajaxSuccess(function(event, xhr, settings) {
    var data;
    data = $.parseJSON(xhr.responseText);
    if (data.csrftoken != null) {
      return csrftoken = data.csrftoken;
    }
  });

  $.extend($.facebox.settings, {
    loadingImage: 'img/loading.gif',
    closeImage: 'img/closelabel.png'
  });

  display_messages = function(data) {
    var $msgs;
    $msgs = $('#messages').empty();
    if (data.error != null) {
      $msgs.appendEl('.error', {
        text: data.error
      });
    }
    if (data.status != null) {
      return $msgs.appendEl('.info', {
        text: data.status
      });
    }
  };

  get_header_row = function() {
    return $.el('tr.table-header').appendEl('th').appendEl('th', {
      text: 'Item'
    }).appendEl('th', {
      text: 'Priority'
    });
  };

  get_priority_widget = function(current) {
    var opt, priority, result, _i, _len;
    if (current == null) {
      current = default_priority;
    }
    result = $.el('select');
    for (_i = 0, _len = priorities.length; _i < _len; _i++) {
      priority = priorities[_i];
      opt = $.el('option', {
        value: priority,
        text: priority
      });
      if (priority === current) {
        opt.attr('selected', true);
      }
      result.append(opt);
    }
    result.change(function() {
      var $el, data, id, old_priority, url, value, _ref;
      $el = $(this);
      value = $el.find('option:selected').val();
      _ref = $el.parent().data(), id = _ref.id, old_priority = _ref.old_priority;
      url = '/api/todo/modify/';
      data = {
        id: id,
        priority: value
      };
      return $.post(url, data, function(data, success, xhr) {
        if (data.error != null) {
          $el.text(old_priority);
        } else {
          $el.parent().data('old_priority', value);
        }
        return display_messages(data);
      });
    });
    return result;
  };

  get_delbtn = function($parent) {
    var result;
    result = $parent.el('td.delbtn', {
      html: '<a href="" class="delete-btn">X</a>'
    });
    result.click(del_item);
    return result;
  };

  get_login_info = function() {
    var url;
    url = '/api/account/';
    return $.get(url, function(data, textStatus, jqXHR) {
      if (data.error != null) {
        return;
      }
      set_login_info(data.username);
      if (data.username != null) {
        return setlist();
      }
    });
  };

  set_login_info = function(username) {
    var $changepw, $header, $loginlink, $logout, $registerlink;
    $header = $('#account-info').empty();
    if (username != null) {
      $logout = $.el('a.logout', {
        href: '',
        text: 'Log out'
      });
      $changepw = $.el('a.change-password', {
        href: '#password-change',
        text: 'change password'
      });
      $header.el('span', {
        text: "Welcome, " + username + "! "
      }).append($logout).appendEl('span', {
        text: ' or '
      }).append($changepw);
      $logout.click(ajax_logout);
      return $changepw.facebox();
    } else {
      $loginlink = $.el('a.login', {
        href: "#login",
        text: 'Log in'
      });
      $registerlink = $.el('a.register', {
        href: "#register",
        text: 'Sign up'
      });
      $header.el('span').append($loginlink).appendEl('span', {
        text: ' or '
      }).append($registerlink);
      $loginlink.facebox();
      return $registerlink.facebox();
    }
  };

  ajax_logout = function() {
    var url;
    url = '/api/account/logout/';
    $.get(url, account_callback);
    return false;
  };

  del_item = function(e) {
    var $row, data, id, url;
    $row = $(this).parent();
    id = $row.data('id');
    url = '/api/todo/delete/';
    data = {
      id: id
    };
    $.post(url, data, function(result, success, xhr) {
      if (result.error == null) {
        $row.remove();
      }
      return display_messages(result);
    });
    return false;
  };

  edit_cell = function(value, settings) {
    var $el, data, id, old_label, url, _ref;
    $el = $(this);
    _ref = $(this).parent().data(), id = _ref.id, old_label = _ref.old_label;
    url = '/api/todo/modify/';
    data = {
      id: id,
      label: value
    };
    $.post(url, data, function(data, success, xhr) {
      if (data.error != null) {
        $el.text(old_label);
      } else {
        $el.parent().data('old_label', value);
      }
      return display_messages(data);
    });
    return value;
  };

  add_cell = function(value, settings) {
    var data, url;
    url = '/api/todo/add/';
    data = {
      label: value
    };
    $.post(url, data, function(result, success, xhr) {
      var $parent;
      display_messages(result);
      $parent = settings.itemtd.parent();
      if (result.error != null) {
        $parent.remove();
        return;
      }
      $parent.data({
        id: result.id,
        old_label: value,
        old_priority: default_priority
      });
      $parent.removeClass().addClass('todoitem');
      settings.itemtd.editable('destroy');
      return settings.itemtd.editable(edit_cell);
    });
    return value;
  };

  setlist = function() {
    var url;
    url = '/api/todo/getlist/';
    return $.get(url, function(data, textStatus, jqXHR) {
      var $delbtn, $item, $tdlist, $tr, item, _i, _len, _ref, _results;
      display_messages(data);
      if (data.error != null) {
        return;
      }
      $('.additem-btn').show();
      $tdlist = $('.todolist').empty().append(get_header_row());
      _ref = data.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        $tr = $tdlist.el('tr.todoitem');
        $delbtn = get_delbtn($tr);
        $item = $tr.el('td.item', {
          text: item.label
        });
        $tr.append(get_priority_widget(item.priority));
        $tr.data({
          old_label: item.label,
          old_priority: item.priority,
          id: item.id
        });
        _results.push($item.editable(edit_cell));
      }
      return _results;
    });
  };

  additem = function() {
    var $delbtn, $item, $newrow, $priority, $tdlist;
    $tdlist = $('.todolist');
    $newrow = $tdlist.el('tr.newitem');
    $delbtn = get_delbtn($newrow);
    $item = $newrow.el('td.item');
    $priority = get_priority_widget().appendTo($newrow);
    $item.editable(add_cell, {
      onblur_cb: function() {
        return $newrow.remove();
      },
      row: $newrow,
      itemtd: $item,
      prioritytd: $priority
    });
    $item.click();
    return false;
  };

  account_callback = function(data, success, xhr) {
    display_messages(data);
    if (!(data.error != null)) {
      set_login_info(data.username);
      if (!(data.username != null)) {
        $('.todolist').empty();
        $('.additem-btn').hide();
      }
    }
    return $(document).trigger('close.facebox');
  };

  $(function() {
    get_login_info();
    $('.additem-btn').click(additem);
    $('.facebox').facebox();
    return $(document).on('reveal.facebox', function(revealevent) {
      $('a.facebox').facebox();
      return $('form').on('submit', function(e) {
        var $form, data, url;
        e.preventDefault();
        $form = $(this);
        url = $form.attr('action');
        data = $form.serialize();
        return $.post(url, data, function(data, success, xhr) {
          account_callback(data, success, xhr);
          if ($form.data('refresh') === 1) {
            return setlist();
          }
        });
      });
    });
  });

}).call(this);
